// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: custom_database.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "custom_database.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CreateTableRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateTableRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompositeKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompositeKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompositeKeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompositeKeyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimpleTableRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimpleTableRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddKeyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddKeyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRowByKeyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRowByKeyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRowInSortedTableRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRowInSortedTableRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveKeyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveKeyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppendRowRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppendRowRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Answer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Answer_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_custom_5fdatabase_2eproto() {
  protobuf_AddDesc_custom_5fdatabase_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "custom_database.proto");
  GOOGLE_CHECK(file != NULL);
  CreateTableRequest_descriptor_ = file->message_type(0);
  static const int CreateTableRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableRequest, amount_keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableRequest, keys_),
  };
  CreateTableRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateTableRequest_descriptor_,
      CreateTableRequest::default_instance_,
      CreateTableRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateTableRequest));
  CompositeKey_descriptor_ = file->message_type(1);
  static const int CompositeKey_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositeKey, c_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositeKey, c_key_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositeKey, c_keys_),
  };
  CompositeKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompositeKey_descriptor_,
      CompositeKey::default_instance_,
      CompositeKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositeKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositeKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompositeKey));
  CompositeKeyValue_descriptor_ = file->message_type(2);
  static const int CompositeKeyValue_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositeKeyValue, c_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositeKeyValue, c_key_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositeKeyValue, c_keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositeKeyValue, c_keys_values_),
  };
  CompositeKeyValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompositeKeyValue_descriptor_,
      CompositeKeyValue::default_instance_,
      CompositeKeyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositeKeyValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositeKeyValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompositeKeyValue));
  SimpleTableRequest_descriptor_ = file->message_type(3);
  static const int SimpleTableRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleTableRequest, table_name_),
  };
  SimpleTableRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimpleTableRequest_descriptor_,
      SimpleTableRequest::default_instance_,
      SimpleTableRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleTableRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleTableRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimpleTableRequest));
  AddKeyRequest_descriptor_ = file->message_type(4);
  static const int AddKeyRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddKeyRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddKeyRequest, key_),
  };
  AddKeyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddKeyRequest_descriptor_,
      AddKeyRequest::default_instance_,
      AddKeyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddKeyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddKeyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddKeyRequest));
  GetRowByKeyRequest_descriptor_ = file->message_type(5);
  static const int GetRowByKeyRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRowByKeyRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRowByKeyRequest, key_value_),
  };
  GetRowByKeyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRowByKeyRequest_descriptor_,
      GetRowByKeyRequest::default_instance_,
      GetRowByKeyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRowByKeyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRowByKeyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRowByKeyRequest));
  GetRowInSortedTableRequest_descriptor_ = file->message_type(6);
  static const int GetRowInSortedTableRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRowInSortedTableRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRowInSortedTableRequest, key_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRowInSortedTableRequest, is_reversed_),
  };
  GetRowInSortedTableRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRowInSortedTableRequest_descriptor_,
      GetRowInSortedTableRequest::default_instance_,
      GetRowInSortedTableRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRowInSortedTableRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRowInSortedTableRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRowInSortedTableRequest));
  RemoveKeyRequest_descriptor_ = file->message_type(7);
  static const int RemoveKeyRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveKeyRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveKeyRequest, key_name_),
  };
  RemoveKeyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveKeyRequest_descriptor_,
      RemoveKeyRequest::default_instance_,
      RemoveKeyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveKeyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveKeyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveKeyRequest));
  AppendRowRequest_descriptor_ = file->message_type(8);
  static const int AppendRowRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendRowRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendRowRequest, amount_keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendRowRequest, keys_values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendRowRequest, value_),
  };
  AppendRowRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppendRowRequest_descriptor_,
      AppendRowRequest::default_instance_,
      AppendRowRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendRowRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendRowRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppendRowRequest));
  Answer_descriptor_ = file->message_type(9);
  static const int Answer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Answer, answer_),
  };
  Answer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Answer_descriptor_,
      Answer::default_instance_,
      Answer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Answer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Answer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Answer));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_custom_5fdatabase_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateTableRequest_descriptor_, &CreateTableRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompositeKey_descriptor_, &CompositeKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompositeKeyValue_descriptor_, &CompositeKeyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimpleTableRequest_descriptor_, &SimpleTableRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddKeyRequest_descriptor_, &AddKeyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRowByKeyRequest_descriptor_, &GetRowByKeyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRowInSortedTableRequest_descriptor_, &GetRowInSortedTableRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveKeyRequest_descriptor_, &RemoveKeyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppendRowRequest_descriptor_, &AppendRowRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Answer_descriptor_, &Answer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_custom_5fdatabase_2eproto() {
  delete CreateTableRequest::default_instance_;
  delete CreateTableRequest_reflection_;
  delete CompositeKey::default_instance_;
  delete CompositeKey_reflection_;
  delete CompositeKeyValue::default_instance_;
  delete CompositeKeyValue_reflection_;
  delete SimpleTableRequest::default_instance_;
  delete SimpleTableRequest_reflection_;
  delete AddKeyRequest::default_instance_;
  delete AddKeyRequest_reflection_;
  delete GetRowByKeyRequest::default_instance_;
  delete GetRowByKeyRequest_reflection_;
  delete GetRowInSortedTableRequest::default_instance_;
  delete GetRowInSortedTableRequest_reflection_;
  delete RemoveKeyRequest::default_instance_;
  delete RemoveKeyRequest_reflection_;
  delete AppendRowRequest::default_instance_;
  delete AppendRowRequest_reflection_;
  delete Answer::default_instance_;
  delete Answer_reflection_;
}

void protobuf_AddDesc_custom_5fdatabase_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025custom_database.proto\"Z\n\022CreateTableRe"
    "quest\022\022\n\ntable_name\030\001 \002(\014\022\023\n\013amount_keys"
    "\030\002 \002(\005\022\033\n\004keys\030\003 \003(\0132\r.CompositeKey\"D\n\014C"
    "ompositeKey\022\020\n\010c_amount\030\001 \002(\005\022\022\n\nc_key_n"
    "ame\030\002 \002(\014\022\016\n\006c_keys\030\003 \003(\014\"`\n\021CompositeKe"
    "yValue\022\020\n\010c_amount\030\001 \002(\005\022\022\n\nc_key_name\030\002"
    " \002(\014\022\016\n\006c_keys\030\003 \003(\014\022\025\n\rc_keys_values\030\004 "
    "\003(\014\"(\n\022SimpleTableRequest\022\022\n\ntable_name\030"
    "\001 \002(\014\"\?\n\rAddKeyRequest\022\022\n\ntable_name\030\001 \002"
    "(\014\022\032\n\003key\030\002 \003(\0132\r.CompositeKey\"O\n\022GetRow"
    "ByKeyRequest\022\022\n\ntable_name\030\001 \002(\014\022%\n\tkey_"
    "value\030\002 \003(\0132\022.CompositeKeyValue\"W\n\032GetRo"
    "wInSortedTableRequest\022\022\n\ntable_name\030\001 \002("
    "\014\022\020\n\010key_name\030\002 \002(\014\022\023\n\013is_reversed\030\003 \002(\014"
    "\"8\n\020RemoveKeyRequest\022\022\n\ntable_name\030\001 \002(\014"
    "\022\020\n\010key_name\030\002 \002(\014\"s\n\020AppendRowRequest\022\022"
    "\n\ntable_name\030\001 \002(\014\022\023\n\013amount_keys\030\002 \002(\005\022"
    "\'\n\013keys_values\030\003 \003(\0132\022.CompositeKeyValue"
    "\022\r\n\005value\030\004 \002(\014\"\030\n\006Answer\022\016\n\006answer\030\001 \002("
    "\014", 761);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "custom_database.proto", &protobuf_RegisterTypes);
  CreateTableRequest::default_instance_ = new CreateTableRequest();
  CompositeKey::default_instance_ = new CompositeKey();
  CompositeKeyValue::default_instance_ = new CompositeKeyValue();
  SimpleTableRequest::default_instance_ = new SimpleTableRequest();
  AddKeyRequest::default_instance_ = new AddKeyRequest();
  GetRowByKeyRequest::default_instance_ = new GetRowByKeyRequest();
  GetRowInSortedTableRequest::default_instance_ = new GetRowInSortedTableRequest();
  RemoveKeyRequest::default_instance_ = new RemoveKeyRequest();
  AppendRowRequest::default_instance_ = new AppendRowRequest();
  Answer::default_instance_ = new Answer();
  CreateTableRequest::default_instance_->InitAsDefaultInstance();
  CompositeKey::default_instance_->InitAsDefaultInstance();
  CompositeKeyValue::default_instance_->InitAsDefaultInstance();
  SimpleTableRequest::default_instance_->InitAsDefaultInstance();
  AddKeyRequest::default_instance_->InitAsDefaultInstance();
  GetRowByKeyRequest::default_instance_->InitAsDefaultInstance();
  GetRowInSortedTableRequest::default_instance_->InitAsDefaultInstance();
  RemoveKeyRequest::default_instance_->InitAsDefaultInstance();
  AppendRowRequest::default_instance_->InitAsDefaultInstance();
  Answer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_custom_5fdatabase_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_custom_5fdatabase_2eproto {
  StaticDescriptorInitializer_custom_5fdatabase_2eproto() {
    protobuf_AddDesc_custom_5fdatabase_2eproto();
  }
} static_descriptor_initializer_custom_5fdatabase_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CreateTableRequest::kTableNameFieldNumber;
const int CreateTableRequest::kAmountKeysFieldNumber;
const int CreateTableRequest::kKeysFieldNumber;
#endif  // !_MSC_VER

CreateTableRequest::CreateTableRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateTableRequest)
}

void CreateTableRequest::InitAsDefaultInstance() {
}

CreateTableRequest::CreateTableRequest(const CreateTableRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CreateTableRequest)
}

void CreateTableRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_keys_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateTableRequest::~CreateTableRequest() {
  // @@protoc_insertion_point(destructor:CreateTableRequest)
  SharedDtor();
}

void CreateTableRequest::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete table_name_;
  }
  if (this != default_instance_) {
  }
}

void CreateTableRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateTableRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateTableRequest_descriptor_;
}

const CreateTableRequest& CreateTableRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_custom_5fdatabase_2eproto();
  return *default_instance_;
}

CreateTableRequest* CreateTableRequest::default_instance_ = NULL;

CreateTableRequest* CreateTableRequest::New() const {
  return new CreateTableRequest;
}

void CreateTableRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        table_name_->clear();
      }
    }
    amount_keys_ = 0;
  }
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateTableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateTableRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_amount_keys;
        break;
      }

      // required int32 amount_keys = 2;
      case 2: {
        if (tag == 16) {
         parse_amount_keys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_keys_)));
          set_has_amount_keys();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_keys;
        break;
      }

      // repeated .CompositeKey keys = 3;
      case 3: {
        if (tag == 26) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_keys;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateTableRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateTableRequest)
  return false;
#undef DO_
}

void CreateTableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateTableRequest)
  // required bytes table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->table_name(), output);
  }

  // required int32 amount_keys = 2;
  if (has_amount_keys()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->amount_keys(), output);
  }

  // repeated .CompositeKey keys = 3;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->keys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateTableRequest)
}

::google::protobuf::uint8* CreateTableRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CreateTableRequest)
  // required bytes table_name = 1;
  if (has_table_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->table_name(), target);
  }

  // required int32 amount_keys = 2;
  if (has_amount_keys()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->amount_keys(), target);
  }

  // repeated .CompositeKey keys = 3;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->keys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateTableRequest)
  return target;
}

int CreateTableRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table_name());
    }

    // required int32 amount_keys = 2;
    if (has_amount_keys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount_keys());
    }

  }
  // repeated .CompositeKey keys = 3;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateTableRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateTableRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateTableRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateTableRequest::MergeFrom(const CreateTableRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_amount_keys()) {
      set_amount_keys(from.amount_keys());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateTableRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTableRequest::CopyFrom(const CreateTableRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTableRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->keys())) return false;
  return true;
}

void CreateTableRequest::Swap(CreateTableRequest* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(amount_keys_, other->amount_keys_);
    keys_.Swap(&other->keys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateTableRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateTableRequest_descriptor_;
  metadata.reflection = CreateTableRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CompositeKey::kCAmountFieldNumber;
const int CompositeKey::kCKeyNameFieldNumber;
const int CompositeKey::kCKeysFieldNumber;
#endif  // !_MSC_VER

CompositeKey::CompositeKey()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CompositeKey)
}

void CompositeKey::InitAsDefaultInstance() {
}

CompositeKey::CompositeKey(const CompositeKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CompositeKey)
}

void CompositeKey::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  c_amount_ = 0;
  c_key_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompositeKey::~CompositeKey() {
  // @@protoc_insertion_point(destructor:CompositeKey)
  SharedDtor();
}

void CompositeKey::SharedDtor() {
  if (c_key_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete c_key_name_;
  }
  if (this != default_instance_) {
  }
}

void CompositeKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompositeKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompositeKey_descriptor_;
}

const CompositeKey& CompositeKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_custom_5fdatabase_2eproto();
  return *default_instance_;
}

CompositeKey* CompositeKey::default_instance_ = NULL;

CompositeKey* CompositeKey::New() const {
  return new CompositeKey;
}

void CompositeKey::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    c_amount_ = 0;
    if (has_c_key_name()) {
      if (c_key_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        c_key_name_->clear();
      }
    }
  }
  c_keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompositeKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CompositeKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 c_amount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &c_amount_)));
          set_has_c_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_c_key_name;
        break;
      }

      // required bytes c_key_name = 2;
      case 2: {
        if (tag == 18) {
         parse_c_key_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_c_key_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_c_keys;
        break;
      }

      // repeated bytes c_keys = 3;
      case 3: {
        if (tag == 26) {
         parse_c_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_c_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_c_keys;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CompositeKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CompositeKey)
  return false;
#undef DO_
}

void CompositeKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CompositeKey)
  // required int32 c_amount = 1;
  if (has_c_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->c_amount(), output);
  }

  // required bytes c_key_name = 2;
  if (has_c_key_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->c_key_name(), output);
  }

  // repeated bytes c_keys = 3;
  for (int i = 0; i < this->c_keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->c_keys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CompositeKey)
}

::google::protobuf::uint8* CompositeKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CompositeKey)
  // required int32 c_amount = 1;
  if (has_c_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->c_amount(), target);
  }

  // required bytes c_key_name = 2;
  if (has_c_key_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->c_key_name(), target);
  }

  // repeated bytes c_keys = 3;
  for (int i = 0; i < this->c_keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->c_keys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CompositeKey)
  return target;
}

int CompositeKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 c_amount = 1;
    if (has_c_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->c_amount());
    }

    // required bytes c_key_name = 2;
    if (has_c_key_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->c_key_name());
    }

  }
  // repeated bytes c_keys = 3;
  total_size += 1 * this->c_keys_size();
  for (int i = 0; i < this->c_keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->c_keys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompositeKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompositeKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompositeKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompositeKey::MergeFrom(const CompositeKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  c_keys_.MergeFrom(from.c_keys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_c_amount()) {
      set_c_amount(from.c_amount());
    }
    if (from.has_c_key_name()) {
      set_c_key_name(from.c_key_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompositeKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompositeKey::CopyFrom(const CompositeKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompositeKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CompositeKey::Swap(CompositeKey* other) {
  if (other != this) {
    std::swap(c_amount_, other->c_amount_);
    std::swap(c_key_name_, other->c_key_name_);
    c_keys_.Swap(&other->c_keys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompositeKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompositeKey_descriptor_;
  metadata.reflection = CompositeKey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CompositeKeyValue::kCAmountFieldNumber;
const int CompositeKeyValue::kCKeyNameFieldNumber;
const int CompositeKeyValue::kCKeysFieldNumber;
const int CompositeKeyValue::kCKeysValuesFieldNumber;
#endif  // !_MSC_VER

CompositeKeyValue::CompositeKeyValue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CompositeKeyValue)
}

void CompositeKeyValue::InitAsDefaultInstance() {
}

CompositeKeyValue::CompositeKeyValue(const CompositeKeyValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CompositeKeyValue)
}

void CompositeKeyValue::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  c_amount_ = 0;
  c_key_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompositeKeyValue::~CompositeKeyValue() {
  // @@protoc_insertion_point(destructor:CompositeKeyValue)
  SharedDtor();
}

void CompositeKeyValue::SharedDtor() {
  if (c_key_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete c_key_name_;
  }
  if (this != default_instance_) {
  }
}

void CompositeKeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompositeKeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompositeKeyValue_descriptor_;
}

const CompositeKeyValue& CompositeKeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_custom_5fdatabase_2eproto();
  return *default_instance_;
}

CompositeKeyValue* CompositeKeyValue::default_instance_ = NULL;

CompositeKeyValue* CompositeKeyValue::New() const {
  return new CompositeKeyValue;
}

void CompositeKeyValue::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    c_amount_ = 0;
    if (has_c_key_name()) {
      if (c_key_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        c_key_name_->clear();
      }
    }
  }
  c_keys_.Clear();
  c_keys_values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompositeKeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CompositeKeyValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 c_amount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &c_amount_)));
          set_has_c_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_c_key_name;
        break;
      }

      // required bytes c_key_name = 2;
      case 2: {
        if (tag == 18) {
         parse_c_key_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_c_key_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_c_keys;
        break;
      }

      // repeated bytes c_keys = 3;
      case 3: {
        if (tag == 26) {
         parse_c_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_c_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_c_keys;
        if (input->ExpectTag(34)) goto parse_c_keys_values;
        break;
      }

      // repeated bytes c_keys_values = 4;
      case 4: {
        if (tag == 34) {
         parse_c_keys_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_c_keys_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_c_keys_values;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CompositeKeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CompositeKeyValue)
  return false;
#undef DO_
}

void CompositeKeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CompositeKeyValue)
  // required int32 c_amount = 1;
  if (has_c_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->c_amount(), output);
  }

  // required bytes c_key_name = 2;
  if (has_c_key_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->c_key_name(), output);
  }

  // repeated bytes c_keys = 3;
  for (int i = 0; i < this->c_keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->c_keys(i), output);
  }

  // repeated bytes c_keys_values = 4;
  for (int i = 0; i < this->c_keys_values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->c_keys_values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CompositeKeyValue)
}

::google::protobuf::uint8* CompositeKeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CompositeKeyValue)
  // required int32 c_amount = 1;
  if (has_c_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->c_amount(), target);
  }

  // required bytes c_key_name = 2;
  if (has_c_key_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->c_key_name(), target);
  }

  // repeated bytes c_keys = 3;
  for (int i = 0; i < this->c_keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->c_keys(i), target);
  }

  // repeated bytes c_keys_values = 4;
  for (int i = 0; i < this->c_keys_values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->c_keys_values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CompositeKeyValue)
  return target;
}

int CompositeKeyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 c_amount = 1;
    if (has_c_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->c_amount());
    }

    // required bytes c_key_name = 2;
    if (has_c_key_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->c_key_name());
    }

  }
  // repeated bytes c_keys = 3;
  total_size += 1 * this->c_keys_size();
  for (int i = 0; i < this->c_keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->c_keys(i));
  }

  // repeated bytes c_keys_values = 4;
  total_size += 1 * this->c_keys_values_size();
  for (int i = 0; i < this->c_keys_values_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->c_keys_values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompositeKeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompositeKeyValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompositeKeyValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompositeKeyValue::MergeFrom(const CompositeKeyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  c_keys_.MergeFrom(from.c_keys_);
  c_keys_values_.MergeFrom(from.c_keys_values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_c_amount()) {
      set_c_amount(from.c_amount());
    }
    if (from.has_c_key_name()) {
      set_c_key_name(from.c_key_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompositeKeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompositeKeyValue::CopyFrom(const CompositeKeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompositeKeyValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CompositeKeyValue::Swap(CompositeKeyValue* other) {
  if (other != this) {
    std::swap(c_amount_, other->c_amount_);
    std::swap(c_key_name_, other->c_key_name_);
    c_keys_.Swap(&other->c_keys_);
    c_keys_values_.Swap(&other->c_keys_values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompositeKeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompositeKeyValue_descriptor_;
  metadata.reflection = CompositeKeyValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimpleTableRequest::kTableNameFieldNumber;
#endif  // !_MSC_VER

SimpleTableRequest::SimpleTableRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SimpleTableRequest)
}

void SimpleTableRequest::InitAsDefaultInstance() {
}

SimpleTableRequest::SimpleTableRequest(const SimpleTableRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SimpleTableRequest)
}

void SimpleTableRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimpleTableRequest::~SimpleTableRequest() {
  // @@protoc_insertion_point(destructor:SimpleTableRequest)
  SharedDtor();
}

void SimpleTableRequest::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete table_name_;
  }
  if (this != default_instance_) {
  }
}

void SimpleTableRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleTableRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleTableRequest_descriptor_;
}

const SimpleTableRequest& SimpleTableRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_custom_5fdatabase_2eproto();
  return *default_instance_;
}

SimpleTableRequest* SimpleTableRequest::default_instance_ = NULL;

SimpleTableRequest* SimpleTableRequest::New() const {
  return new SimpleTableRequest;
}

void SimpleTableRequest::Clear() {
  if (has_table_name()) {
    if (table_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      table_name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimpleTableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SimpleTableRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SimpleTableRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SimpleTableRequest)
  return false;
#undef DO_
}

void SimpleTableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SimpleTableRequest)
  // required bytes table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->table_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SimpleTableRequest)
}

::google::protobuf::uint8* SimpleTableRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SimpleTableRequest)
  // required bytes table_name = 1;
  if (has_table_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->table_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SimpleTableRequest)
  return target;
}

int SimpleTableRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleTableRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimpleTableRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimpleTableRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimpleTableRequest::MergeFrom(const SimpleTableRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimpleTableRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleTableRequest::CopyFrom(const SimpleTableRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleTableRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SimpleTableRequest::Swap(SimpleTableRequest* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimpleTableRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimpleTableRequest_descriptor_;
  metadata.reflection = SimpleTableRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddKeyRequest::kTableNameFieldNumber;
const int AddKeyRequest::kKeyFieldNumber;
#endif  // !_MSC_VER

AddKeyRequest::AddKeyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AddKeyRequest)
}

void AddKeyRequest::InitAsDefaultInstance() {
}

AddKeyRequest::AddKeyRequest(const AddKeyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AddKeyRequest)
}

void AddKeyRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddKeyRequest::~AddKeyRequest() {
  // @@protoc_insertion_point(destructor:AddKeyRequest)
  SharedDtor();
}

void AddKeyRequest::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete table_name_;
  }
  if (this != default_instance_) {
  }
}

void AddKeyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddKeyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddKeyRequest_descriptor_;
}

const AddKeyRequest& AddKeyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_custom_5fdatabase_2eproto();
  return *default_instance_;
}

AddKeyRequest* AddKeyRequest::default_instance_ = NULL;

AddKeyRequest* AddKeyRequest::New() const {
  return new AddKeyRequest;
}

void AddKeyRequest::Clear() {
  if (has_table_name()) {
    if (table_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      table_name_->clear();
    }
  }
  key_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddKeyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AddKeyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // repeated .CompositeKey key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AddKeyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AddKeyRequest)
  return false;
#undef DO_
}

void AddKeyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AddKeyRequest)
  // required bytes table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->table_name(), output);
  }

  // repeated .CompositeKey key = 2;
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->key(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AddKeyRequest)
}

::google::protobuf::uint8* AddKeyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AddKeyRequest)
  // required bytes table_name = 1;
  if (has_table_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->table_name(), target);
  }

  // repeated .CompositeKey key = 2;
  for (int i = 0; i < this->key_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->key(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AddKeyRequest)
  return target;
}

int AddKeyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table_name());
    }

  }
  // repeated .CompositeKey key = 2;
  total_size += 1 * this->key_size();
  for (int i = 0; i < this->key_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->key(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddKeyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddKeyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddKeyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddKeyRequest::MergeFrom(const AddKeyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_.MergeFrom(from.key_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddKeyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddKeyRequest::CopyFrom(const AddKeyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddKeyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->key())) return false;
  return true;
}

void AddKeyRequest::Swap(AddKeyRequest* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    key_.Swap(&other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddKeyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddKeyRequest_descriptor_;
  metadata.reflection = AddKeyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRowByKeyRequest::kTableNameFieldNumber;
const int GetRowByKeyRequest::kKeyValueFieldNumber;
#endif  // !_MSC_VER

GetRowByKeyRequest::GetRowByKeyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetRowByKeyRequest)
}

void GetRowByKeyRequest::InitAsDefaultInstance() {
}

GetRowByKeyRequest::GetRowByKeyRequest(const GetRowByKeyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GetRowByKeyRequest)
}

void GetRowByKeyRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRowByKeyRequest::~GetRowByKeyRequest() {
  // @@protoc_insertion_point(destructor:GetRowByKeyRequest)
  SharedDtor();
}

void GetRowByKeyRequest::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete table_name_;
  }
  if (this != default_instance_) {
  }
}

void GetRowByKeyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRowByKeyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRowByKeyRequest_descriptor_;
}

const GetRowByKeyRequest& GetRowByKeyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_custom_5fdatabase_2eproto();
  return *default_instance_;
}

GetRowByKeyRequest* GetRowByKeyRequest::default_instance_ = NULL;

GetRowByKeyRequest* GetRowByKeyRequest::New() const {
  return new GetRowByKeyRequest;
}

void GetRowByKeyRequest::Clear() {
  if (has_table_name()) {
    if (table_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      table_name_->clear();
    }
  }
  key_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRowByKeyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetRowByKeyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key_value;
        break;
      }

      // repeated .CompositeKeyValue key_value = 2;
      case 2: {
        if (tag == 18) {
         parse_key_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_key_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key_value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetRowByKeyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetRowByKeyRequest)
  return false;
#undef DO_
}

void GetRowByKeyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetRowByKeyRequest)
  // required bytes table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->table_name(), output);
  }

  // repeated .CompositeKeyValue key_value = 2;
  for (int i = 0; i < this->key_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->key_value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GetRowByKeyRequest)
}

::google::protobuf::uint8* GetRowByKeyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetRowByKeyRequest)
  // required bytes table_name = 1;
  if (has_table_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->table_name(), target);
  }

  // repeated .CompositeKeyValue key_value = 2;
  for (int i = 0; i < this->key_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->key_value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetRowByKeyRequest)
  return target;
}

int GetRowByKeyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table_name());
    }

  }
  // repeated .CompositeKeyValue key_value = 2;
  total_size += 1 * this->key_value_size();
  for (int i = 0; i < this->key_value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->key_value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRowByKeyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRowByKeyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRowByKeyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRowByKeyRequest::MergeFrom(const GetRowByKeyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_value_.MergeFrom(from.key_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRowByKeyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRowByKeyRequest::CopyFrom(const GetRowByKeyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRowByKeyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->key_value())) return false;
  return true;
}

void GetRowByKeyRequest::Swap(GetRowByKeyRequest* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    key_value_.Swap(&other->key_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRowByKeyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRowByKeyRequest_descriptor_;
  metadata.reflection = GetRowByKeyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRowInSortedTableRequest::kTableNameFieldNumber;
const int GetRowInSortedTableRequest::kKeyNameFieldNumber;
const int GetRowInSortedTableRequest::kIsReversedFieldNumber;
#endif  // !_MSC_VER

GetRowInSortedTableRequest::GetRowInSortedTableRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetRowInSortedTableRequest)
}

void GetRowInSortedTableRequest::InitAsDefaultInstance() {
}

GetRowInSortedTableRequest::GetRowInSortedTableRequest(const GetRowInSortedTableRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GetRowInSortedTableRequest)
}

void GetRowInSortedTableRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_reversed_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRowInSortedTableRequest::~GetRowInSortedTableRequest() {
  // @@protoc_insertion_point(destructor:GetRowInSortedTableRequest)
  SharedDtor();
}

void GetRowInSortedTableRequest::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete table_name_;
  }
  if (key_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_name_;
  }
  if (is_reversed_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete is_reversed_;
  }
  if (this != default_instance_) {
  }
}

void GetRowInSortedTableRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRowInSortedTableRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRowInSortedTableRequest_descriptor_;
}

const GetRowInSortedTableRequest& GetRowInSortedTableRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_custom_5fdatabase_2eproto();
  return *default_instance_;
}

GetRowInSortedTableRequest* GetRowInSortedTableRequest::default_instance_ = NULL;

GetRowInSortedTableRequest* GetRowInSortedTableRequest::New() const {
  return new GetRowInSortedTableRequest;
}

void GetRowInSortedTableRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        table_name_->clear();
      }
    }
    if (has_key_name()) {
      if (key_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_name_->clear();
      }
    }
    if (has_is_reversed()) {
      if (is_reversed_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        is_reversed_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRowInSortedTableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetRowInSortedTableRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key_name;
        break;
      }

      // required bytes key_name = 2;
      case 2: {
        if (tag == 18) {
         parse_key_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_is_reversed;
        break;
      }

      // required bytes is_reversed = 3;
      case 3: {
        if (tag == 26) {
         parse_is_reversed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_is_reversed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetRowInSortedTableRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetRowInSortedTableRequest)
  return false;
#undef DO_
}

void GetRowInSortedTableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetRowInSortedTableRequest)
  // required bytes table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->table_name(), output);
  }

  // required bytes key_name = 2;
  if (has_key_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key_name(), output);
  }

  // required bytes is_reversed = 3;
  if (has_is_reversed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->is_reversed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GetRowInSortedTableRequest)
}

::google::protobuf::uint8* GetRowInSortedTableRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetRowInSortedTableRequest)
  // required bytes table_name = 1;
  if (has_table_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->table_name(), target);
  }

  // required bytes key_name = 2;
  if (has_key_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key_name(), target);
  }

  // required bytes is_reversed = 3;
  if (has_is_reversed()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->is_reversed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetRowInSortedTableRequest)
  return target;
}

int GetRowInSortedTableRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table_name());
    }

    // required bytes key_name = 2;
    if (has_key_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key_name());
    }

    // required bytes is_reversed = 3;
    if (has_is_reversed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->is_reversed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRowInSortedTableRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRowInSortedTableRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRowInSortedTableRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRowInSortedTableRequest::MergeFrom(const GetRowInSortedTableRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_key_name()) {
      set_key_name(from.key_name());
    }
    if (from.has_is_reversed()) {
      set_is_reversed(from.is_reversed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRowInSortedTableRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRowInSortedTableRequest::CopyFrom(const GetRowInSortedTableRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRowInSortedTableRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GetRowInSortedTableRequest::Swap(GetRowInSortedTableRequest* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(key_name_, other->key_name_);
    std::swap(is_reversed_, other->is_reversed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRowInSortedTableRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRowInSortedTableRequest_descriptor_;
  metadata.reflection = GetRowInSortedTableRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveKeyRequest::kTableNameFieldNumber;
const int RemoveKeyRequest::kKeyNameFieldNumber;
#endif  // !_MSC_VER

RemoveKeyRequest::RemoveKeyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RemoveKeyRequest)
}

void RemoveKeyRequest::InitAsDefaultInstance() {
}

RemoveKeyRequest::RemoveKeyRequest(const RemoveKeyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RemoveKeyRequest)
}

void RemoveKeyRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveKeyRequest::~RemoveKeyRequest() {
  // @@protoc_insertion_point(destructor:RemoveKeyRequest)
  SharedDtor();
}

void RemoveKeyRequest::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete table_name_;
  }
  if (key_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_name_;
  }
  if (this != default_instance_) {
  }
}

void RemoveKeyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveKeyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveKeyRequest_descriptor_;
}

const RemoveKeyRequest& RemoveKeyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_custom_5fdatabase_2eproto();
  return *default_instance_;
}

RemoveKeyRequest* RemoveKeyRequest::default_instance_ = NULL;

RemoveKeyRequest* RemoveKeyRequest::New() const {
  return new RemoveKeyRequest;
}

void RemoveKeyRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        table_name_->clear();
      }
    }
    if (has_key_name()) {
      if (key_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveKeyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RemoveKeyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key_name;
        break;
      }

      // required bytes key_name = 2;
      case 2: {
        if (tag == 18) {
         parse_key_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RemoveKeyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RemoveKeyRequest)
  return false;
#undef DO_
}

void RemoveKeyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RemoveKeyRequest)
  // required bytes table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->table_name(), output);
  }

  // required bytes key_name = 2;
  if (has_key_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RemoveKeyRequest)
}

::google::protobuf::uint8* RemoveKeyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RemoveKeyRequest)
  // required bytes table_name = 1;
  if (has_table_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->table_name(), target);
  }

  // required bytes key_name = 2;
  if (has_key_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemoveKeyRequest)
  return target;
}

int RemoveKeyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table_name());
    }

    // required bytes key_name = 2;
    if (has_key_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveKeyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveKeyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveKeyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveKeyRequest::MergeFrom(const RemoveKeyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_key_name()) {
      set_key_name(from.key_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveKeyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveKeyRequest::CopyFrom(const RemoveKeyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveKeyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RemoveKeyRequest::Swap(RemoveKeyRequest* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(key_name_, other->key_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveKeyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveKeyRequest_descriptor_;
  metadata.reflection = RemoveKeyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppendRowRequest::kTableNameFieldNumber;
const int AppendRowRequest::kAmountKeysFieldNumber;
const int AppendRowRequest::kKeysValuesFieldNumber;
const int AppendRowRequest::kValueFieldNumber;
#endif  // !_MSC_VER

AppendRowRequest::AppendRowRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AppendRowRequest)
}

void AppendRowRequest::InitAsDefaultInstance() {
}

AppendRowRequest::AppendRowRequest(const AppendRowRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AppendRowRequest)
}

void AppendRowRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_keys_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppendRowRequest::~AppendRowRequest() {
  // @@protoc_insertion_point(destructor:AppendRowRequest)
  SharedDtor();
}

void AppendRowRequest::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete table_name_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void AppendRowRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppendRowRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppendRowRequest_descriptor_;
}

const AppendRowRequest& AppendRowRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_custom_5fdatabase_2eproto();
  return *default_instance_;
}

AppendRowRequest* AppendRowRequest::default_instance_ = NULL;

AppendRowRequest* AppendRowRequest::New() const {
  return new AppendRowRequest;
}

void AppendRowRequest::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        table_name_->clear();
      }
    }
    amount_keys_ = 0;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  keys_values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppendRowRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AppendRowRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_amount_keys;
        break;
      }

      // required int32 amount_keys = 2;
      case 2: {
        if (tag == 16) {
         parse_amount_keys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_keys_)));
          set_has_amount_keys();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_keys_values;
        break;
      }

      // repeated .CompositeKeyValue keys_values = 3;
      case 3: {
        if (tag == 26) {
         parse_keys_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keys_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_keys_values;
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }

      // required bytes value = 4;
      case 4: {
        if (tag == 34) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AppendRowRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AppendRowRequest)
  return false;
#undef DO_
}

void AppendRowRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AppendRowRequest)
  // required bytes table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->table_name(), output);
  }

  // required int32 amount_keys = 2;
  if (has_amount_keys()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->amount_keys(), output);
  }

  // repeated .CompositeKeyValue keys_values = 3;
  for (int i = 0; i < this->keys_values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->keys_values(i), output);
  }

  // required bytes value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AppendRowRequest)
}

::google::protobuf::uint8* AppendRowRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AppendRowRequest)
  // required bytes table_name = 1;
  if (has_table_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->table_name(), target);
  }

  // required int32 amount_keys = 2;
  if (has_amount_keys()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->amount_keys(), target);
  }

  // repeated .CompositeKeyValue keys_values = 3;
  for (int i = 0; i < this->keys_values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->keys_values(i), target);
  }

  // required bytes value = 4;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AppendRowRequest)
  return target;
}

int AppendRowRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table_name());
    }

    // required int32 amount_keys = 2;
    if (has_amount_keys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount_keys());
    }

    // required bytes value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  // repeated .CompositeKeyValue keys_values = 3;
  total_size += 1 * this->keys_values_size();
  for (int i = 0; i < this->keys_values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keys_values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppendRowRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppendRowRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppendRowRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppendRowRequest::MergeFrom(const AppendRowRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_values_.MergeFrom(from.keys_values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_amount_keys()) {
      set_amount_keys(from.amount_keys());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppendRowRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendRowRequest::CopyFrom(const AppendRowRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendRowRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->keys_values())) return false;
  return true;
}

void AppendRowRequest::Swap(AppendRowRequest* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(amount_keys_, other->amount_keys_);
    keys_values_.Swap(&other->keys_values_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppendRowRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppendRowRequest_descriptor_;
  metadata.reflection = AppendRowRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Answer::kAnswerFieldNumber;
#endif  // !_MSC_VER

Answer::Answer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Answer)
}

void Answer::InitAsDefaultInstance() {
}

Answer::Answer(const Answer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Answer)
}

void Answer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  answer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Answer::~Answer() {
  // @@protoc_insertion_point(destructor:Answer)
  SharedDtor();
}

void Answer::SharedDtor() {
  if (answer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete answer_;
  }
  if (this != default_instance_) {
  }
}

void Answer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Answer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Answer_descriptor_;
}

const Answer& Answer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_custom_5fdatabase_2eproto();
  return *default_instance_;
}

Answer* Answer::default_instance_ = NULL;

Answer* Answer::New() const {
  return new Answer;
}

void Answer::Clear() {
  if (has_answer()) {
    if (answer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      answer_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Answer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Answer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes answer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_answer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Answer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Answer)
  return false;
#undef DO_
}

void Answer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Answer)
  // required bytes answer = 1;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->answer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Answer)
}

::google::protobuf::uint8* Answer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Answer)
  // required bytes answer = 1;
  if (has_answer()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->answer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Answer)
  return target;
}

int Answer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes answer = 1;
    if (has_answer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->answer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Answer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Answer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Answer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Answer::MergeFrom(const Answer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_answer()) {
      set_answer(from.answer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Answer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Answer::CopyFrom(const Answer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Answer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Answer::Swap(Answer* other) {
  if (other != this) {
    std::swap(answer_, other->answer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Answer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Answer_descriptor_;
  metadata.reflection = Answer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
