// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: custom_database.proto

#ifndef PROTOBUF_custom_5fdatabase_2eproto__INCLUDED
#define PROTOBUF_custom_5fdatabase_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_custom_5fdatabase_2eproto();
void protobuf_AssignDesc_custom_5fdatabase_2eproto();
void protobuf_ShutdownFile_custom_5fdatabase_2eproto();

class CreateTableRequest;
class CompositeKey;
class CompositeKeyValue;
class SimpleTableRequest;
class AddKeyRequest;
class GetRowByKeyRequest;
class GetRowInSortedTableRequest;
class RemoveKeyRequest;
class AppendRowRequest;
class Answer;

// ===================================================================

class CreateTableRequest : public ::google::protobuf::Message {
 public:
  CreateTableRequest();
  virtual ~CreateTableRequest();

  CreateTableRequest(const CreateTableRequest& from);

  inline CreateTableRequest& operator=(const CreateTableRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateTableRequest& default_instance();

  void Swap(CreateTableRequest* other);

  // implements Message ----------------------------------------------

  CreateTableRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateTableRequest& from);
  void MergeFrom(const CreateTableRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const void* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  inline void set_allocated_table_name(::std::string* table_name);

  // required int32 amount_keys = 2;
  inline bool has_amount_keys() const;
  inline void clear_amount_keys();
  static const int kAmountKeysFieldNumber = 2;
  inline ::google::protobuf::int32 amount_keys() const;
  inline void set_amount_keys(::google::protobuf::int32 value);

  // repeated .CompositeKey keys = 3;
  inline int keys_size() const;
  inline void clear_keys();
  static const int kKeysFieldNumber = 3;
  inline const ::CompositeKey& keys(int index) const;
  inline ::CompositeKey* mutable_keys(int index);
  inline ::CompositeKey* add_keys();
  inline const ::google::protobuf::RepeatedPtrField< ::CompositeKey >&
      keys() const;
  inline ::google::protobuf::RepeatedPtrField< ::CompositeKey >*
      mutable_keys();

  // @@protoc_insertion_point(class_scope:CreateTableRequest)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_amount_keys();
  inline void clear_has_amount_keys();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* table_name_;
  ::google::protobuf::RepeatedPtrField< ::CompositeKey > keys_;
  ::google::protobuf::int32 amount_keys_;
  friend void  protobuf_AddDesc_custom_5fdatabase_2eproto();
  friend void protobuf_AssignDesc_custom_5fdatabase_2eproto();
  friend void protobuf_ShutdownFile_custom_5fdatabase_2eproto();

  void InitAsDefaultInstance();
  static CreateTableRequest* default_instance_;
};
// -------------------------------------------------------------------

class CompositeKey : public ::google::protobuf::Message {
 public:
  CompositeKey();
  virtual ~CompositeKey();

  CompositeKey(const CompositeKey& from);

  inline CompositeKey& operator=(const CompositeKey& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CompositeKey& default_instance();

  void Swap(CompositeKey* other);

  // implements Message ----------------------------------------------

  CompositeKey* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CompositeKey& from);
  void MergeFrom(const CompositeKey& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 c_amount = 1;
  inline bool has_c_amount() const;
  inline void clear_c_amount();
  static const int kCAmountFieldNumber = 1;
  inline ::google::protobuf::int32 c_amount() const;
  inline void set_c_amount(::google::protobuf::int32 value);

  // required bytes c_key_name = 2;
  inline bool has_c_key_name() const;
  inline void clear_c_key_name();
  static const int kCKeyNameFieldNumber = 2;
  inline const ::std::string& c_key_name() const;
  inline void set_c_key_name(const ::std::string& value);
  inline void set_c_key_name(const char* value);
  inline void set_c_key_name(const void* value, size_t size);
  inline ::std::string* mutable_c_key_name();
  inline ::std::string* release_c_key_name();
  inline void set_allocated_c_key_name(::std::string* c_key_name);

  // repeated bytes c_keys = 3;
  inline int c_keys_size() const;
  inline void clear_c_keys();
  static const int kCKeysFieldNumber = 3;
  inline const ::std::string& c_keys(int index) const;
  inline ::std::string* mutable_c_keys(int index);
  inline void set_c_keys(int index, const ::std::string& value);
  inline void set_c_keys(int index, const char* value);
  inline void set_c_keys(int index, const void* value, size_t size);
  inline ::std::string* add_c_keys();
  inline void add_c_keys(const ::std::string& value);
  inline void add_c_keys(const char* value);
  inline void add_c_keys(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& c_keys() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_c_keys();

  // @@protoc_insertion_point(class_scope:CompositeKey)
 private:
  inline void set_has_c_amount();
  inline void clear_has_c_amount();
  inline void set_has_c_key_name();
  inline void clear_has_c_key_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* c_key_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> c_keys_;
  ::google::protobuf::int32 c_amount_;
  friend void  protobuf_AddDesc_custom_5fdatabase_2eproto();
  friend void protobuf_AssignDesc_custom_5fdatabase_2eproto();
  friend void protobuf_ShutdownFile_custom_5fdatabase_2eproto();

  void InitAsDefaultInstance();
  static CompositeKey* default_instance_;
};
// -------------------------------------------------------------------

class CompositeKeyValue : public ::google::protobuf::Message {
 public:
  CompositeKeyValue();
  virtual ~CompositeKeyValue();

  CompositeKeyValue(const CompositeKeyValue& from);

  inline CompositeKeyValue& operator=(const CompositeKeyValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CompositeKeyValue& default_instance();

  void Swap(CompositeKeyValue* other);

  // implements Message ----------------------------------------------

  CompositeKeyValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CompositeKeyValue& from);
  void MergeFrom(const CompositeKeyValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 c_amount = 1;
  inline bool has_c_amount() const;
  inline void clear_c_amount();
  static const int kCAmountFieldNumber = 1;
  inline ::google::protobuf::int32 c_amount() const;
  inline void set_c_amount(::google::protobuf::int32 value);

  // required bytes c_key_name = 2;
  inline bool has_c_key_name() const;
  inline void clear_c_key_name();
  static const int kCKeyNameFieldNumber = 2;
  inline const ::std::string& c_key_name() const;
  inline void set_c_key_name(const ::std::string& value);
  inline void set_c_key_name(const char* value);
  inline void set_c_key_name(const void* value, size_t size);
  inline ::std::string* mutable_c_key_name();
  inline ::std::string* release_c_key_name();
  inline void set_allocated_c_key_name(::std::string* c_key_name);

  // repeated bytes c_keys = 3;
  inline int c_keys_size() const;
  inline void clear_c_keys();
  static const int kCKeysFieldNumber = 3;
  inline const ::std::string& c_keys(int index) const;
  inline ::std::string* mutable_c_keys(int index);
  inline void set_c_keys(int index, const ::std::string& value);
  inline void set_c_keys(int index, const char* value);
  inline void set_c_keys(int index, const void* value, size_t size);
  inline ::std::string* add_c_keys();
  inline void add_c_keys(const ::std::string& value);
  inline void add_c_keys(const char* value);
  inline void add_c_keys(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& c_keys() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_c_keys();

  // repeated bytes c_keys_values = 4;
  inline int c_keys_values_size() const;
  inline void clear_c_keys_values();
  static const int kCKeysValuesFieldNumber = 4;
  inline const ::std::string& c_keys_values(int index) const;
  inline ::std::string* mutable_c_keys_values(int index);
  inline void set_c_keys_values(int index, const ::std::string& value);
  inline void set_c_keys_values(int index, const char* value);
  inline void set_c_keys_values(int index, const void* value, size_t size);
  inline ::std::string* add_c_keys_values();
  inline void add_c_keys_values(const ::std::string& value);
  inline void add_c_keys_values(const char* value);
  inline void add_c_keys_values(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& c_keys_values() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_c_keys_values();

  // @@protoc_insertion_point(class_scope:CompositeKeyValue)
 private:
  inline void set_has_c_amount();
  inline void clear_has_c_amount();
  inline void set_has_c_key_name();
  inline void clear_has_c_key_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* c_key_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> c_keys_;
  ::google::protobuf::RepeatedPtrField< ::std::string> c_keys_values_;
  ::google::protobuf::int32 c_amount_;
  friend void  protobuf_AddDesc_custom_5fdatabase_2eproto();
  friend void protobuf_AssignDesc_custom_5fdatabase_2eproto();
  friend void protobuf_ShutdownFile_custom_5fdatabase_2eproto();

  void InitAsDefaultInstance();
  static CompositeKeyValue* default_instance_;
};
// -------------------------------------------------------------------

class SimpleTableRequest : public ::google::protobuf::Message {
 public:
  SimpleTableRequest();
  virtual ~SimpleTableRequest();

  SimpleTableRequest(const SimpleTableRequest& from);

  inline SimpleTableRequest& operator=(const SimpleTableRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimpleTableRequest& default_instance();

  void Swap(SimpleTableRequest* other);

  // implements Message ----------------------------------------------

  SimpleTableRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimpleTableRequest& from);
  void MergeFrom(const SimpleTableRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const void* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  inline void set_allocated_table_name(::std::string* table_name);

  // @@protoc_insertion_point(class_scope:SimpleTableRequest)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* table_name_;
  friend void  protobuf_AddDesc_custom_5fdatabase_2eproto();
  friend void protobuf_AssignDesc_custom_5fdatabase_2eproto();
  friend void protobuf_ShutdownFile_custom_5fdatabase_2eproto();

  void InitAsDefaultInstance();
  static SimpleTableRequest* default_instance_;
};
// -------------------------------------------------------------------

class AddKeyRequest : public ::google::protobuf::Message {
 public:
  AddKeyRequest();
  virtual ~AddKeyRequest();

  AddKeyRequest(const AddKeyRequest& from);

  inline AddKeyRequest& operator=(const AddKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddKeyRequest& default_instance();

  void Swap(AddKeyRequest* other);

  // implements Message ----------------------------------------------

  AddKeyRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddKeyRequest& from);
  void MergeFrom(const AddKeyRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const void* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  inline void set_allocated_table_name(::std::string* table_name);

  // repeated .CompositeKey key = 2;
  inline int key_size() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::CompositeKey& key(int index) const;
  inline ::CompositeKey* mutable_key(int index);
  inline ::CompositeKey* add_key();
  inline const ::google::protobuf::RepeatedPtrField< ::CompositeKey >&
      key() const;
  inline ::google::protobuf::RepeatedPtrField< ::CompositeKey >*
      mutable_key();

  // @@protoc_insertion_point(class_scope:AddKeyRequest)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* table_name_;
  ::google::protobuf::RepeatedPtrField< ::CompositeKey > key_;
  friend void  protobuf_AddDesc_custom_5fdatabase_2eproto();
  friend void protobuf_AssignDesc_custom_5fdatabase_2eproto();
  friend void protobuf_ShutdownFile_custom_5fdatabase_2eproto();

  void InitAsDefaultInstance();
  static AddKeyRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetRowByKeyRequest : public ::google::protobuf::Message {
 public:
  GetRowByKeyRequest();
  virtual ~GetRowByKeyRequest();

  GetRowByKeyRequest(const GetRowByKeyRequest& from);

  inline GetRowByKeyRequest& operator=(const GetRowByKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRowByKeyRequest& default_instance();

  void Swap(GetRowByKeyRequest* other);

  // implements Message ----------------------------------------------

  GetRowByKeyRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetRowByKeyRequest& from);
  void MergeFrom(const GetRowByKeyRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const void* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  inline void set_allocated_table_name(::std::string* table_name);

  // repeated .CompositeKeyValue key_value = 2;
  inline int key_value_size() const;
  inline void clear_key_value();
  static const int kKeyValueFieldNumber = 2;
  inline const ::CompositeKeyValue& key_value(int index) const;
  inline ::CompositeKeyValue* mutable_key_value(int index);
  inline ::CompositeKeyValue* add_key_value();
  inline const ::google::protobuf::RepeatedPtrField< ::CompositeKeyValue >&
      key_value() const;
  inline ::google::protobuf::RepeatedPtrField< ::CompositeKeyValue >*
      mutable_key_value();

  // @@protoc_insertion_point(class_scope:GetRowByKeyRequest)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* table_name_;
  ::google::protobuf::RepeatedPtrField< ::CompositeKeyValue > key_value_;
  friend void  protobuf_AddDesc_custom_5fdatabase_2eproto();
  friend void protobuf_AssignDesc_custom_5fdatabase_2eproto();
  friend void protobuf_ShutdownFile_custom_5fdatabase_2eproto();

  void InitAsDefaultInstance();
  static GetRowByKeyRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetRowInSortedTableRequest : public ::google::protobuf::Message {
 public:
  GetRowInSortedTableRequest();
  virtual ~GetRowInSortedTableRequest();

  GetRowInSortedTableRequest(const GetRowInSortedTableRequest& from);

  inline GetRowInSortedTableRequest& operator=(const GetRowInSortedTableRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRowInSortedTableRequest& default_instance();

  void Swap(GetRowInSortedTableRequest* other);

  // implements Message ----------------------------------------------

  GetRowInSortedTableRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetRowInSortedTableRequest& from);
  void MergeFrom(const GetRowInSortedTableRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const void* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  inline void set_allocated_table_name(::std::string* table_name);

  // required bytes key_name = 2;
  inline bool has_key_name() const;
  inline void clear_key_name();
  static const int kKeyNameFieldNumber = 2;
  inline const ::std::string& key_name() const;
  inline void set_key_name(const ::std::string& value);
  inline void set_key_name(const char* value);
  inline void set_key_name(const void* value, size_t size);
  inline ::std::string* mutable_key_name();
  inline ::std::string* release_key_name();
  inline void set_allocated_key_name(::std::string* key_name);

  // required bytes is_reversed = 3;
  inline bool has_is_reversed() const;
  inline void clear_is_reversed();
  static const int kIsReversedFieldNumber = 3;
  inline const ::std::string& is_reversed() const;
  inline void set_is_reversed(const ::std::string& value);
  inline void set_is_reversed(const char* value);
  inline void set_is_reversed(const void* value, size_t size);
  inline ::std::string* mutable_is_reversed();
  inline ::std::string* release_is_reversed();
  inline void set_allocated_is_reversed(::std::string* is_reversed);

  // @@protoc_insertion_point(class_scope:GetRowInSortedTableRequest)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_key_name();
  inline void clear_has_key_name();
  inline void set_has_is_reversed();
  inline void clear_has_is_reversed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* table_name_;
  ::std::string* key_name_;
  ::std::string* is_reversed_;
  friend void  protobuf_AddDesc_custom_5fdatabase_2eproto();
  friend void protobuf_AssignDesc_custom_5fdatabase_2eproto();
  friend void protobuf_ShutdownFile_custom_5fdatabase_2eproto();

  void InitAsDefaultInstance();
  static GetRowInSortedTableRequest* default_instance_;
};
// -------------------------------------------------------------------

class RemoveKeyRequest : public ::google::protobuf::Message {
 public:
  RemoveKeyRequest();
  virtual ~RemoveKeyRequest();

  RemoveKeyRequest(const RemoveKeyRequest& from);

  inline RemoveKeyRequest& operator=(const RemoveKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveKeyRequest& default_instance();

  void Swap(RemoveKeyRequest* other);

  // implements Message ----------------------------------------------

  RemoveKeyRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoveKeyRequest& from);
  void MergeFrom(const RemoveKeyRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const void* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  inline void set_allocated_table_name(::std::string* table_name);

  // required bytes key_name = 2;
  inline bool has_key_name() const;
  inline void clear_key_name();
  static const int kKeyNameFieldNumber = 2;
  inline const ::std::string& key_name() const;
  inline void set_key_name(const ::std::string& value);
  inline void set_key_name(const char* value);
  inline void set_key_name(const void* value, size_t size);
  inline ::std::string* mutable_key_name();
  inline ::std::string* release_key_name();
  inline void set_allocated_key_name(::std::string* key_name);

  // @@protoc_insertion_point(class_scope:RemoveKeyRequest)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_key_name();
  inline void clear_has_key_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* table_name_;
  ::std::string* key_name_;
  friend void  protobuf_AddDesc_custom_5fdatabase_2eproto();
  friend void protobuf_AssignDesc_custom_5fdatabase_2eproto();
  friend void protobuf_ShutdownFile_custom_5fdatabase_2eproto();

  void InitAsDefaultInstance();
  static RemoveKeyRequest* default_instance_;
};
// -------------------------------------------------------------------

class AppendRowRequest : public ::google::protobuf::Message {
 public:
  AppendRowRequest();
  virtual ~AppendRowRequest();

  AppendRowRequest(const AppendRowRequest& from);

  inline AppendRowRequest& operator=(const AppendRowRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppendRowRequest& default_instance();

  void Swap(AppendRowRequest* other);

  // implements Message ----------------------------------------------

  AppendRowRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AppendRowRequest& from);
  void MergeFrom(const AppendRowRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const void* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  inline void set_allocated_table_name(::std::string* table_name);

  // required int32 amount_keys = 2;
  inline bool has_amount_keys() const;
  inline void clear_amount_keys();
  static const int kAmountKeysFieldNumber = 2;
  inline ::google::protobuf::int32 amount_keys() const;
  inline void set_amount_keys(::google::protobuf::int32 value);

  // repeated .CompositeKeyValue keys_values = 3;
  inline int keys_values_size() const;
  inline void clear_keys_values();
  static const int kKeysValuesFieldNumber = 3;
  inline const ::CompositeKeyValue& keys_values(int index) const;
  inline ::CompositeKeyValue* mutable_keys_values(int index);
  inline ::CompositeKeyValue* add_keys_values();
  inline const ::google::protobuf::RepeatedPtrField< ::CompositeKeyValue >&
      keys_values() const;
  inline ::google::protobuf::RepeatedPtrField< ::CompositeKeyValue >*
      mutable_keys_values();

  // required bytes value = 4;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:AppendRowRequest)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_amount_keys();
  inline void clear_has_amount_keys();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* table_name_;
  ::google::protobuf::RepeatedPtrField< ::CompositeKeyValue > keys_values_;
  ::std::string* value_;
  ::google::protobuf::int32 amount_keys_;
  friend void  protobuf_AddDesc_custom_5fdatabase_2eproto();
  friend void protobuf_AssignDesc_custom_5fdatabase_2eproto();
  friend void protobuf_ShutdownFile_custom_5fdatabase_2eproto();

  void InitAsDefaultInstance();
  static AppendRowRequest* default_instance_;
};
// -------------------------------------------------------------------

class Answer : public ::google::protobuf::Message {
 public:
  Answer();
  virtual ~Answer();

  Answer(const Answer& from);

  inline Answer& operator=(const Answer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Answer& default_instance();

  void Swap(Answer* other);

  // implements Message ----------------------------------------------

  Answer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Answer& from);
  void MergeFrom(const Answer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes answer = 1;
  inline bool has_answer() const;
  inline void clear_answer();
  static const int kAnswerFieldNumber = 1;
  inline const ::std::string& answer() const;
  inline void set_answer(const ::std::string& value);
  inline void set_answer(const char* value);
  inline void set_answer(const void* value, size_t size);
  inline ::std::string* mutable_answer();
  inline ::std::string* release_answer();
  inline void set_allocated_answer(::std::string* answer);

  // @@protoc_insertion_point(class_scope:Answer)
 private:
  inline void set_has_answer();
  inline void clear_has_answer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* answer_;
  friend void  protobuf_AddDesc_custom_5fdatabase_2eproto();
  friend void protobuf_AssignDesc_custom_5fdatabase_2eproto();
  friend void protobuf_ShutdownFile_custom_5fdatabase_2eproto();

  void InitAsDefaultInstance();
  static Answer* default_instance_;
};
// ===================================================================


// ===================================================================

// CreateTableRequest

// required bytes table_name = 1;
inline bool CreateTableRequest::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateTableRequest::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateTableRequest::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateTableRequest::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& CreateTableRequest::table_name() const {
  // @@protoc_insertion_point(field_get:CreateTableRequest.table_name)
  return *table_name_;
}
inline void CreateTableRequest::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
  // @@protoc_insertion_point(field_set:CreateTableRequest.table_name)
}
inline void CreateTableRequest::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CreateTableRequest.table_name)
}
inline void CreateTableRequest::set_table_name(const void* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CreateTableRequest.table_name)
}
inline ::std::string* CreateTableRequest::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CreateTableRequest.table_name)
  return table_name_;
}
inline ::std::string* CreateTableRequest::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreateTableRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete table_name_;
  }
  if (table_name) {
    set_has_table_name();
    table_name_ = table_name;
  } else {
    clear_has_table_name();
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CreateTableRequest.table_name)
}

// required int32 amount_keys = 2;
inline bool CreateTableRequest::has_amount_keys() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateTableRequest::set_has_amount_keys() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateTableRequest::clear_has_amount_keys() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateTableRequest::clear_amount_keys() {
  amount_keys_ = 0;
  clear_has_amount_keys();
}
inline ::google::protobuf::int32 CreateTableRequest::amount_keys() const {
  // @@protoc_insertion_point(field_get:CreateTableRequest.amount_keys)
  return amount_keys_;
}
inline void CreateTableRequest::set_amount_keys(::google::protobuf::int32 value) {
  set_has_amount_keys();
  amount_keys_ = value;
  // @@protoc_insertion_point(field_set:CreateTableRequest.amount_keys)
}

// repeated .CompositeKey keys = 3;
inline int CreateTableRequest::keys_size() const {
  return keys_.size();
}
inline void CreateTableRequest::clear_keys() {
  keys_.Clear();
}
inline const ::CompositeKey& CreateTableRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:CreateTableRequest.keys)
  return keys_.Get(index);
}
inline ::CompositeKey* CreateTableRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:CreateTableRequest.keys)
  return keys_.Mutable(index);
}
inline ::CompositeKey* CreateTableRequest::add_keys() {
  // @@protoc_insertion_point(field_add:CreateTableRequest.keys)
  return keys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CompositeKey >&
CreateTableRequest::keys() const {
  // @@protoc_insertion_point(field_list:CreateTableRequest.keys)
  return keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::CompositeKey >*
CreateTableRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:CreateTableRequest.keys)
  return &keys_;
}

// -------------------------------------------------------------------

// CompositeKey

// required int32 c_amount = 1;
inline bool CompositeKey::has_c_amount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CompositeKey::set_has_c_amount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CompositeKey::clear_has_c_amount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CompositeKey::clear_c_amount() {
  c_amount_ = 0;
  clear_has_c_amount();
}
inline ::google::protobuf::int32 CompositeKey::c_amount() const {
  // @@protoc_insertion_point(field_get:CompositeKey.c_amount)
  return c_amount_;
}
inline void CompositeKey::set_c_amount(::google::protobuf::int32 value) {
  set_has_c_amount();
  c_amount_ = value;
  // @@protoc_insertion_point(field_set:CompositeKey.c_amount)
}

// required bytes c_key_name = 2;
inline bool CompositeKey::has_c_key_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CompositeKey::set_has_c_key_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CompositeKey::clear_has_c_key_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CompositeKey::clear_c_key_name() {
  if (c_key_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    c_key_name_->clear();
  }
  clear_has_c_key_name();
}
inline const ::std::string& CompositeKey::c_key_name() const {
  // @@protoc_insertion_point(field_get:CompositeKey.c_key_name)
  return *c_key_name_;
}
inline void CompositeKey::set_c_key_name(const ::std::string& value) {
  set_has_c_key_name();
  if (c_key_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    c_key_name_ = new ::std::string;
  }
  c_key_name_->assign(value);
  // @@protoc_insertion_point(field_set:CompositeKey.c_key_name)
}
inline void CompositeKey::set_c_key_name(const char* value) {
  set_has_c_key_name();
  if (c_key_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    c_key_name_ = new ::std::string;
  }
  c_key_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CompositeKey.c_key_name)
}
inline void CompositeKey::set_c_key_name(const void* value, size_t size) {
  set_has_c_key_name();
  if (c_key_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    c_key_name_ = new ::std::string;
  }
  c_key_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CompositeKey.c_key_name)
}
inline ::std::string* CompositeKey::mutable_c_key_name() {
  set_has_c_key_name();
  if (c_key_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    c_key_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CompositeKey.c_key_name)
  return c_key_name_;
}
inline ::std::string* CompositeKey::release_c_key_name() {
  clear_has_c_key_name();
  if (c_key_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = c_key_name_;
    c_key_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CompositeKey::set_allocated_c_key_name(::std::string* c_key_name) {
  if (c_key_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete c_key_name_;
  }
  if (c_key_name) {
    set_has_c_key_name();
    c_key_name_ = c_key_name;
  } else {
    clear_has_c_key_name();
    c_key_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CompositeKey.c_key_name)
}

// repeated bytes c_keys = 3;
inline int CompositeKey::c_keys_size() const {
  return c_keys_.size();
}
inline void CompositeKey::clear_c_keys() {
  c_keys_.Clear();
}
inline const ::std::string& CompositeKey::c_keys(int index) const {
  // @@protoc_insertion_point(field_get:CompositeKey.c_keys)
  return c_keys_.Get(index);
}
inline ::std::string* CompositeKey::mutable_c_keys(int index) {
  // @@protoc_insertion_point(field_mutable:CompositeKey.c_keys)
  return c_keys_.Mutable(index);
}
inline void CompositeKey::set_c_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CompositeKey.c_keys)
  c_keys_.Mutable(index)->assign(value);
}
inline void CompositeKey::set_c_keys(int index, const char* value) {
  c_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CompositeKey.c_keys)
}
inline void CompositeKey::set_c_keys(int index, const void* value, size_t size) {
  c_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CompositeKey.c_keys)
}
inline ::std::string* CompositeKey::add_c_keys() {
  return c_keys_.Add();
}
inline void CompositeKey::add_c_keys(const ::std::string& value) {
  c_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CompositeKey.c_keys)
}
inline void CompositeKey::add_c_keys(const char* value) {
  c_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CompositeKey.c_keys)
}
inline void CompositeKey::add_c_keys(const void* value, size_t size) {
  c_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CompositeKey.c_keys)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CompositeKey::c_keys() const {
  // @@protoc_insertion_point(field_list:CompositeKey.c_keys)
  return c_keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CompositeKey::mutable_c_keys() {
  // @@protoc_insertion_point(field_mutable_list:CompositeKey.c_keys)
  return &c_keys_;
}

// -------------------------------------------------------------------

// CompositeKeyValue

// required int32 c_amount = 1;
inline bool CompositeKeyValue::has_c_amount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CompositeKeyValue::set_has_c_amount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CompositeKeyValue::clear_has_c_amount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CompositeKeyValue::clear_c_amount() {
  c_amount_ = 0;
  clear_has_c_amount();
}
inline ::google::protobuf::int32 CompositeKeyValue::c_amount() const {
  // @@protoc_insertion_point(field_get:CompositeKeyValue.c_amount)
  return c_amount_;
}
inline void CompositeKeyValue::set_c_amount(::google::protobuf::int32 value) {
  set_has_c_amount();
  c_amount_ = value;
  // @@protoc_insertion_point(field_set:CompositeKeyValue.c_amount)
}

// required bytes c_key_name = 2;
inline bool CompositeKeyValue::has_c_key_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CompositeKeyValue::set_has_c_key_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CompositeKeyValue::clear_has_c_key_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CompositeKeyValue::clear_c_key_name() {
  if (c_key_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    c_key_name_->clear();
  }
  clear_has_c_key_name();
}
inline const ::std::string& CompositeKeyValue::c_key_name() const {
  // @@protoc_insertion_point(field_get:CompositeKeyValue.c_key_name)
  return *c_key_name_;
}
inline void CompositeKeyValue::set_c_key_name(const ::std::string& value) {
  set_has_c_key_name();
  if (c_key_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    c_key_name_ = new ::std::string;
  }
  c_key_name_->assign(value);
  // @@protoc_insertion_point(field_set:CompositeKeyValue.c_key_name)
}
inline void CompositeKeyValue::set_c_key_name(const char* value) {
  set_has_c_key_name();
  if (c_key_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    c_key_name_ = new ::std::string;
  }
  c_key_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CompositeKeyValue.c_key_name)
}
inline void CompositeKeyValue::set_c_key_name(const void* value, size_t size) {
  set_has_c_key_name();
  if (c_key_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    c_key_name_ = new ::std::string;
  }
  c_key_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CompositeKeyValue.c_key_name)
}
inline ::std::string* CompositeKeyValue::mutable_c_key_name() {
  set_has_c_key_name();
  if (c_key_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    c_key_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CompositeKeyValue.c_key_name)
  return c_key_name_;
}
inline ::std::string* CompositeKeyValue::release_c_key_name() {
  clear_has_c_key_name();
  if (c_key_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = c_key_name_;
    c_key_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CompositeKeyValue::set_allocated_c_key_name(::std::string* c_key_name) {
  if (c_key_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete c_key_name_;
  }
  if (c_key_name) {
    set_has_c_key_name();
    c_key_name_ = c_key_name;
  } else {
    clear_has_c_key_name();
    c_key_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CompositeKeyValue.c_key_name)
}

// repeated bytes c_keys = 3;
inline int CompositeKeyValue::c_keys_size() const {
  return c_keys_.size();
}
inline void CompositeKeyValue::clear_c_keys() {
  c_keys_.Clear();
}
inline const ::std::string& CompositeKeyValue::c_keys(int index) const {
  // @@protoc_insertion_point(field_get:CompositeKeyValue.c_keys)
  return c_keys_.Get(index);
}
inline ::std::string* CompositeKeyValue::mutable_c_keys(int index) {
  // @@protoc_insertion_point(field_mutable:CompositeKeyValue.c_keys)
  return c_keys_.Mutable(index);
}
inline void CompositeKeyValue::set_c_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CompositeKeyValue.c_keys)
  c_keys_.Mutable(index)->assign(value);
}
inline void CompositeKeyValue::set_c_keys(int index, const char* value) {
  c_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CompositeKeyValue.c_keys)
}
inline void CompositeKeyValue::set_c_keys(int index, const void* value, size_t size) {
  c_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CompositeKeyValue.c_keys)
}
inline ::std::string* CompositeKeyValue::add_c_keys() {
  return c_keys_.Add();
}
inline void CompositeKeyValue::add_c_keys(const ::std::string& value) {
  c_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CompositeKeyValue.c_keys)
}
inline void CompositeKeyValue::add_c_keys(const char* value) {
  c_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CompositeKeyValue.c_keys)
}
inline void CompositeKeyValue::add_c_keys(const void* value, size_t size) {
  c_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CompositeKeyValue.c_keys)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CompositeKeyValue::c_keys() const {
  // @@protoc_insertion_point(field_list:CompositeKeyValue.c_keys)
  return c_keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CompositeKeyValue::mutable_c_keys() {
  // @@protoc_insertion_point(field_mutable_list:CompositeKeyValue.c_keys)
  return &c_keys_;
}

// repeated bytes c_keys_values = 4;
inline int CompositeKeyValue::c_keys_values_size() const {
  return c_keys_values_.size();
}
inline void CompositeKeyValue::clear_c_keys_values() {
  c_keys_values_.Clear();
}
inline const ::std::string& CompositeKeyValue::c_keys_values(int index) const {
  // @@protoc_insertion_point(field_get:CompositeKeyValue.c_keys_values)
  return c_keys_values_.Get(index);
}
inline ::std::string* CompositeKeyValue::mutable_c_keys_values(int index) {
  // @@protoc_insertion_point(field_mutable:CompositeKeyValue.c_keys_values)
  return c_keys_values_.Mutable(index);
}
inline void CompositeKeyValue::set_c_keys_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CompositeKeyValue.c_keys_values)
  c_keys_values_.Mutable(index)->assign(value);
}
inline void CompositeKeyValue::set_c_keys_values(int index, const char* value) {
  c_keys_values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CompositeKeyValue.c_keys_values)
}
inline void CompositeKeyValue::set_c_keys_values(int index, const void* value, size_t size) {
  c_keys_values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CompositeKeyValue.c_keys_values)
}
inline ::std::string* CompositeKeyValue::add_c_keys_values() {
  return c_keys_values_.Add();
}
inline void CompositeKeyValue::add_c_keys_values(const ::std::string& value) {
  c_keys_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CompositeKeyValue.c_keys_values)
}
inline void CompositeKeyValue::add_c_keys_values(const char* value) {
  c_keys_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CompositeKeyValue.c_keys_values)
}
inline void CompositeKeyValue::add_c_keys_values(const void* value, size_t size) {
  c_keys_values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CompositeKeyValue.c_keys_values)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CompositeKeyValue::c_keys_values() const {
  // @@protoc_insertion_point(field_list:CompositeKeyValue.c_keys_values)
  return c_keys_values_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CompositeKeyValue::mutable_c_keys_values() {
  // @@protoc_insertion_point(field_mutable_list:CompositeKeyValue.c_keys_values)
  return &c_keys_values_;
}

// -------------------------------------------------------------------

// SimpleTableRequest

// required bytes table_name = 1;
inline bool SimpleTableRequest::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SimpleTableRequest::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SimpleTableRequest::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SimpleTableRequest::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& SimpleTableRequest::table_name() const {
  // @@protoc_insertion_point(field_get:SimpleTableRequest.table_name)
  return *table_name_;
}
inline void SimpleTableRequest::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
  // @@protoc_insertion_point(field_set:SimpleTableRequest.table_name)
}
inline void SimpleTableRequest::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:SimpleTableRequest.table_name)
}
inline void SimpleTableRequest::set_table_name(const void* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SimpleTableRequest.table_name)
}
inline ::std::string* SimpleTableRequest::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SimpleTableRequest.table_name)
  return table_name_;
}
inline ::std::string* SimpleTableRequest::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SimpleTableRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete table_name_;
  }
  if (table_name) {
    set_has_table_name();
    table_name_ = table_name;
  } else {
    clear_has_table_name();
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SimpleTableRequest.table_name)
}

// -------------------------------------------------------------------

// AddKeyRequest

// required bytes table_name = 1;
inline bool AddKeyRequest::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddKeyRequest::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddKeyRequest::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddKeyRequest::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& AddKeyRequest::table_name() const {
  // @@protoc_insertion_point(field_get:AddKeyRequest.table_name)
  return *table_name_;
}
inline void AddKeyRequest::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
  // @@protoc_insertion_point(field_set:AddKeyRequest.table_name)
}
inline void AddKeyRequest::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AddKeyRequest.table_name)
}
inline void AddKeyRequest::set_table_name(const void* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AddKeyRequest.table_name)
}
inline ::std::string* AddKeyRequest::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AddKeyRequest.table_name)
  return table_name_;
}
inline ::std::string* AddKeyRequest::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AddKeyRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete table_name_;
  }
  if (table_name) {
    set_has_table_name();
    table_name_ = table_name;
  } else {
    clear_has_table_name();
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AddKeyRequest.table_name)
}

// repeated .CompositeKey key = 2;
inline int AddKeyRequest::key_size() const {
  return key_.size();
}
inline void AddKeyRequest::clear_key() {
  key_.Clear();
}
inline const ::CompositeKey& AddKeyRequest::key(int index) const {
  // @@protoc_insertion_point(field_get:AddKeyRequest.key)
  return key_.Get(index);
}
inline ::CompositeKey* AddKeyRequest::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:AddKeyRequest.key)
  return key_.Mutable(index);
}
inline ::CompositeKey* AddKeyRequest::add_key() {
  // @@protoc_insertion_point(field_add:AddKeyRequest.key)
  return key_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CompositeKey >&
AddKeyRequest::key() const {
  // @@protoc_insertion_point(field_list:AddKeyRequest.key)
  return key_;
}
inline ::google::protobuf::RepeatedPtrField< ::CompositeKey >*
AddKeyRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:AddKeyRequest.key)
  return &key_;
}

// -------------------------------------------------------------------

// GetRowByKeyRequest

// required bytes table_name = 1;
inline bool GetRowByKeyRequest::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetRowByKeyRequest::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetRowByKeyRequest::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetRowByKeyRequest::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& GetRowByKeyRequest::table_name() const {
  // @@protoc_insertion_point(field_get:GetRowByKeyRequest.table_name)
  return *table_name_;
}
inline void GetRowByKeyRequest::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
  // @@protoc_insertion_point(field_set:GetRowByKeyRequest.table_name)
}
inline void GetRowByKeyRequest::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:GetRowByKeyRequest.table_name)
}
inline void GetRowByKeyRequest::set_table_name(const void* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GetRowByKeyRequest.table_name)
}
inline ::std::string* GetRowByKeyRequest::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GetRowByKeyRequest.table_name)
  return table_name_;
}
inline ::std::string* GetRowByKeyRequest::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetRowByKeyRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete table_name_;
  }
  if (table_name) {
    set_has_table_name();
    table_name_ = table_name;
  } else {
    clear_has_table_name();
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GetRowByKeyRequest.table_name)
}

// repeated .CompositeKeyValue key_value = 2;
inline int GetRowByKeyRequest::key_value_size() const {
  return key_value_.size();
}
inline void GetRowByKeyRequest::clear_key_value() {
  key_value_.Clear();
}
inline const ::CompositeKeyValue& GetRowByKeyRequest::key_value(int index) const {
  // @@protoc_insertion_point(field_get:GetRowByKeyRequest.key_value)
  return key_value_.Get(index);
}
inline ::CompositeKeyValue* GetRowByKeyRequest::mutable_key_value(int index) {
  // @@protoc_insertion_point(field_mutable:GetRowByKeyRequest.key_value)
  return key_value_.Mutable(index);
}
inline ::CompositeKeyValue* GetRowByKeyRequest::add_key_value() {
  // @@protoc_insertion_point(field_add:GetRowByKeyRequest.key_value)
  return key_value_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CompositeKeyValue >&
GetRowByKeyRequest::key_value() const {
  // @@protoc_insertion_point(field_list:GetRowByKeyRequest.key_value)
  return key_value_;
}
inline ::google::protobuf::RepeatedPtrField< ::CompositeKeyValue >*
GetRowByKeyRequest::mutable_key_value() {
  // @@protoc_insertion_point(field_mutable_list:GetRowByKeyRequest.key_value)
  return &key_value_;
}

// -------------------------------------------------------------------

// GetRowInSortedTableRequest

// required bytes table_name = 1;
inline bool GetRowInSortedTableRequest::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetRowInSortedTableRequest::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetRowInSortedTableRequest::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetRowInSortedTableRequest::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& GetRowInSortedTableRequest::table_name() const {
  // @@protoc_insertion_point(field_get:GetRowInSortedTableRequest.table_name)
  return *table_name_;
}
inline void GetRowInSortedTableRequest::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
  // @@protoc_insertion_point(field_set:GetRowInSortedTableRequest.table_name)
}
inline void GetRowInSortedTableRequest::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:GetRowInSortedTableRequest.table_name)
}
inline void GetRowInSortedTableRequest::set_table_name(const void* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GetRowInSortedTableRequest.table_name)
}
inline ::std::string* GetRowInSortedTableRequest::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GetRowInSortedTableRequest.table_name)
  return table_name_;
}
inline ::std::string* GetRowInSortedTableRequest::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetRowInSortedTableRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete table_name_;
  }
  if (table_name) {
    set_has_table_name();
    table_name_ = table_name;
  } else {
    clear_has_table_name();
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GetRowInSortedTableRequest.table_name)
}

// required bytes key_name = 2;
inline bool GetRowInSortedTableRequest::has_key_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetRowInSortedTableRequest::set_has_key_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetRowInSortedTableRequest::clear_has_key_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetRowInSortedTableRequest::clear_key_name() {
  if (key_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_name_->clear();
  }
  clear_has_key_name();
}
inline const ::std::string& GetRowInSortedTableRequest::key_name() const {
  // @@protoc_insertion_point(field_get:GetRowInSortedTableRequest.key_name)
  return *key_name_;
}
inline void GetRowInSortedTableRequest::set_key_name(const ::std::string& value) {
  set_has_key_name();
  if (key_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_name_ = new ::std::string;
  }
  key_name_->assign(value);
  // @@protoc_insertion_point(field_set:GetRowInSortedTableRequest.key_name)
}
inline void GetRowInSortedTableRequest::set_key_name(const char* value) {
  set_has_key_name();
  if (key_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_name_ = new ::std::string;
  }
  key_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:GetRowInSortedTableRequest.key_name)
}
inline void GetRowInSortedTableRequest::set_key_name(const void* value, size_t size) {
  set_has_key_name();
  if (key_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_name_ = new ::std::string;
  }
  key_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GetRowInSortedTableRequest.key_name)
}
inline ::std::string* GetRowInSortedTableRequest::mutable_key_name() {
  set_has_key_name();
  if (key_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GetRowInSortedTableRequest.key_name)
  return key_name_;
}
inline ::std::string* GetRowInSortedTableRequest::release_key_name() {
  clear_has_key_name();
  if (key_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_name_;
    key_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetRowInSortedTableRequest::set_allocated_key_name(::std::string* key_name) {
  if (key_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_name_;
  }
  if (key_name) {
    set_has_key_name();
    key_name_ = key_name;
  } else {
    clear_has_key_name();
    key_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GetRowInSortedTableRequest.key_name)
}

// required bytes is_reversed = 3;
inline bool GetRowInSortedTableRequest::has_is_reversed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetRowInSortedTableRequest::set_has_is_reversed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetRowInSortedTableRequest::clear_has_is_reversed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetRowInSortedTableRequest::clear_is_reversed() {
  if (is_reversed_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    is_reversed_->clear();
  }
  clear_has_is_reversed();
}
inline const ::std::string& GetRowInSortedTableRequest::is_reversed() const {
  // @@protoc_insertion_point(field_get:GetRowInSortedTableRequest.is_reversed)
  return *is_reversed_;
}
inline void GetRowInSortedTableRequest::set_is_reversed(const ::std::string& value) {
  set_has_is_reversed();
  if (is_reversed_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    is_reversed_ = new ::std::string;
  }
  is_reversed_->assign(value);
  // @@protoc_insertion_point(field_set:GetRowInSortedTableRequest.is_reversed)
}
inline void GetRowInSortedTableRequest::set_is_reversed(const char* value) {
  set_has_is_reversed();
  if (is_reversed_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    is_reversed_ = new ::std::string;
  }
  is_reversed_->assign(value);
  // @@protoc_insertion_point(field_set_char:GetRowInSortedTableRequest.is_reversed)
}
inline void GetRowInSortedTableRequest::set_is_reversed(const void* value, size_t size) {
  set_has_is_reversed();
  if (is_reversed_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    is_reversed_ = new ::std::string;
  }
  is_reversed_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GetRowInSortedTableRequest.is_reversed)
}
inline ::std::string* GetRowInSortedTableRequest::mutable_is_reversed() {
  set_has_is_reversed();
  if (is_reversed_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    is_reversed_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GetRowInSortedTableRequest.is_reversed)
  return is_reversed_;
}
inline ::std::string* GetRowInSortedTableRequest::release_is_reversed() {
  clear_has_is_reversed();
  if (is_reversed_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = is_reversed_;
    is_reversed_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetRowInSortedTableRequest::set_allocated_is_reversed(::std::string* is_reversed) {
  if (is_reversed_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete is_reversed_;
  }
  if (is_reversed) {
    set_has_is_reversed();
    is_reversed_ = is_reversed;
  } else {
    clear_has_is_reversed();
    is_reversed_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GetRowInSortedTableRequest.is_reversed)
}

// -------------------------------------------------------------------

// RemoveKeyRequest

// required bytes table_name = 1;
inline bool RemoveKeyRequest::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemoveKeyRequest::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemoveKeyRequest::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RemoveKeyRequest::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& RemoveKeyRequest::table_name() const {
  // @@protoc_insertion_point(field_get:RemoveKeyRequest.table_name)
  return *table_name_;
}
inline void RemoveKeyRequest::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
  // @@protoc_insertion_point(field_set:RemoveKeyRequest.table_name)
}
inline void RemoveKeyRequest::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:RemoveKeyRequest.table_name)
}
inline void RemoveKeyRequest::set_table_name(const void* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RemoveKeyRequest.table_name)
}
inline ::std::string* RemoveKeyRequest::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RemoveKeyRequest.table_name)
  return table_name_;
}
inline ::std::string* RemoveKeyRequest::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RemoveKeyRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete table_name_;
  }
  if (table_name) {
    set_has_table_name();
    table_name_ = table_name;
  } else {
    clear_has_table_name();
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RemoveKeyRequest.table_name)
}

// required bytes key_name = 2;
inline bool RemoveKeyRequest::has_key_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RemoveKeyRequest::set_has_key_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RemoveKeyRequest::clear_has_key_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RemoveKeyRequest::clear_key_name() {
  if (key_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_name_->clear();
  }
  clear_has_key_name();
}
inline const ::std::string& RemoveKeyRequest::key_name() const {
  // @@protoc_insertion_point(field_get:RemoveKeyRequest.key_name)
  return *key_name_;
}
inline void RemoveKeyRequest::set_key_name(const ::std::string& value) {
  set_has_key_name();
  if (key_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_name_ = new ::std::string;
  }
  key_name_->assign(value);
  // @@protoc_insertion_point(field_set:RemoveKeyRequest.key_name)
}
inline void RemoveKeyRequest::set_key_name(const char* value) {
  set_has_key_name();
  if (key_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_name_ = new ::std::string;
  }
  key_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:RemoveKeyRequest.key_name)
}
inline void RemoveKeyRequest::set_key_name(const void* value, size_t size) {
  set_has_key_name();
  if (key_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_name_ = new ::std::string;
  }
  key_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RemoveKeyRequest.key_name)
}
inline ::std::string* RemoveKeyRequest::mutable_key_name() {
  set_has_key_name();
  if (key_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RemoveKeyRequest.key_name)
  return key_name_;
}
inline ::std::string* RemoveKeyRequest::release_key_name() {
  clear_has_key_name();
  if (key_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_name_;
    key_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RemoveKeyRequest::set_allocated_key_name(::std::string* key_name) {
  if (key_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_name_;
  }
  if (key_name) {
    set_has_key_name();
    key_name_ = key_name;
  } else {
    clear_has_key_name();
    key_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RemoveKeyRequest.key_name)
}

// -------------------------------------------------------------------

// AppendRowRequest

// required bytes table_name = 1;
inline bool AppendRowRequest::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppendRowRequest::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppendRowRequest::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppendRowRequest::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& AppendRowRequest::table_name() const {
  // @@protoc_insertion_point(field_get:AppendRowRequest.table_name)
  return *table_name_;
}
inline void AppendRowRequest::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
  // @@protoc_insertion_point(field_set:AppendRowRequest.table_name)
}
inline void AppendRowRequest::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AppendRowRequest.table_name)
}
inline void AppendRowRequest::set_table_name(const void* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AppendRowRequest.table_name)
}
inline ::std::string* AppendRowRequest::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AppendRowRequest.table_name)
  return table_name_;
}
inline ::std::string* AppendRowRequest::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AppendRowRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete table_name_;
  }
  if (table_name) {
    set_has_table_name();
    table_name_ = table_name;
  } else {
    clear_has_table_name();
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AppendRowRequest.table_name)
}

// required int32 amount_keys = 2;
inline bool AppendRowRequest::has_amount_keys() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppendRowRequest::set_has_amount_keys() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AppendRowRequest::clear_has_amount_keys() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AppendRowRequest::clear_amount_keys() {
  amount_keys_ = 0;
  clear_has_amount_keys();
}
inline ::google::protobuf::int32 AppendRowRequest::amount_keys() const {
  // @@protoc_insertion_point(field_get:AppendRowRequest.amount_keys)
  return amount_keys_;
}
inline void AppendRowRequest::set_amount_keys(::google::protobuf::int32 value) {
  set_has_amount_keys();
  amount_keys_ = value;
  // @@protoc_insertion_point(field_set:AppendRowRequest.amount_keys)
}

// repeated .CompositeKeyValue keys_values = 3;
inline int AppendRowRequest::keys_values_size() const {
  return keys_values_.size();
}
inline void AppendRowRequest::clear_keys_values() {
  keys_values_.Clear();
}
inline const ::CompositeKeyValue& AppendRowRequest::keys_values(int index) const {
  // @@protoc_insertion_point(field_get:AppendRowRequest.keys_values)
  return keys_values_.Get(index);
}
inline ::CompositeKeyValue* AppendRowRequest::mutable_keys_values(int index) {
  // @@protoc_insertion_point(field_mutable:AppendRowRequest.keys_values)
  return keys_values_.Mutable(index);
}
inline ::CompositeKeyValue* AppendRowRequest::add_keys_values() {
  // @@protoc_insertion_point(field_add:AppendRowRequest.keys_values)
  return keys_values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CompositeKeyValue >&
AppendRowRequest::keys_values() const {
  // @@protoc_insertion_point(field_list:AppendRowRequest.keys_values)
  return keys_values_;
}
inline ::google::protobuf::RepeatedPtrField< ::CompositeKeyValue >*
AppendRowRequest::mutable_keys_values() {
  // @@protoc_insertion_point(field_mutable_list:AppendRowRequest.keys_values)
  return &keys_values_;
}

// required bytes value = 4;
inline bool AppendRowRequest::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AppendRowRequest::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AppendRowRequest::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AppendRowRequest::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& AppendRowRequest::value() const {
  // @@protoc_insertion_point(field_get:AppendRowRequest.value)
  return *value_;
}
inline void AppendRowRequest::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:AppendRowRequest.value)
}
inline void AppendRowRequest::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:AppendRowRequest.value)
}
inline void AppendRowRequest::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AppendRowRequest.value)
}
inline ::std::string* AppendRowRequest::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AppendRowRequest.value)
  return value_;
}
inline ::std::string* AppendRowRequest::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AppendRowRequest::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AppendRowRequest.value)
}

// -------------------------------------------------------------------

// Answer

// required bytes answer = 1;
inline bool Answer::has_answer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Answer::set_has_answer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Answer::clear_has_answer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Answer::clear_answer() {
  if (answer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    answer_->clear();
  }
  clear_has_answer();
}
inline const ::std::string& Answer::answer() const {
  // @@protoc_insertion_point(field_get:Answer.answer)
  return *answer_;
}
inline void Answer::set_answer(const ::std::string& value) {
  set_has_answer();
  if (answer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    answer_ = new ::std::string;
  }
  answer_->assign(value);
  // @@protoc_insertion_point(field_set:Answer.answer)
}
inline void Answer::set_answer(const char* value) {
  set_has_answer();
  if (answer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    answer_ = new ::std::string;
  }
  answer_->assign(value);
  // @@protoc_insertion_point(field_set_char:Answer.answer)
}
inline void Answer::set_answer(const void* value, size_t size) {
  set_has_answer();
  if (answer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    answer_ = new ::std::string;
  }
  answer_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Answer.answer)
}
inline ::std::string* Answer::mutable_answer() {
  set_has_answer();
  if (answer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    answer_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Answer.answer)
  return answer_;
}
inline ::std::string* Answer::release_answer() {
  clear_has_answer();
  if (answer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = answer_;
    answer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Answer::set_allocated_answer(::std::string* answer) {
  if (answer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete answer_;
  }
  if (answer) {
    set_has_answer();
    answer_ = answer;
  } else {
    clear_has_answer();
    answer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Answer.answer)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_custom_5fdatabase_2eproto__INCLUDED
